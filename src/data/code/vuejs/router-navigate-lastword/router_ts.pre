import { watch, defineComponent, shallowRef } from 'vue'
import { useRoute, useRouter } from 'vue-router'
import type { Router, RouteLocationRaw, NavigationFailure } from 'vue-router'

type ResumeCallback = (arg: any) => void

type ParamsOption = {
    once?: boolean; /// 只调用一次 destroy after call
    target?: string; /// 只在特定路由调用 trigger only in the path
}

const listeners = shallowRef<Record<string, ResumeCallback | null>>({})
const lastWords = shallowRef<{ params: any; option?: ParamsOption } | null>(null)
const navigateBy = shallowRef(false)

export function onResume(resumeCallback: ResumeCallback) {
    const route = useRoute()
    listeners.value = {
        ...listeners.value,
        [route.path]: resumeCallback
    }
}


type Params = [arg?: any, option?: ParamsOption]
type ParamsCallback = (...arg: Params) => void;

interface ParamsRouter extends Router {
    back: ParamsCallback;
    forward: ParamsCallback;
    go: (delta: number, ...params: Params) => void;
    push: (to: RouteLocationRaw, ...params: Params) => Promise<void | NavigationFailure | undefined>;
    replace: (to: RouteLocationRaw, ...params: Params) => Promise<void | NavigationFailure | undefined>;
}

// const keys: Array<keyof ParamsRouter> = ['back', 'forward', 'go', 'push', 'replace']

function setLastword(arg?: any, option: ParamsOption = { once: false }) {
    lastWords.value = {
        params: arg,
        option
    };
    navigateBy.value = true;
}

export function useParamsRouter(): ParamsRouter {
    const router = useRouter()
    const paramsRouter: ParamsRouter = {
        ...router,
        back: (...arg: Params) => {
            setLastword(arg)
            return router.back()
        },
        forward: (...arg: Params) => {
            setLastword(arg)
            return router.forward()
        },
        go: (delta, ...arg) => {
            setLastword(arg)
            return router.go(delta)
        },
        push: (to, ...arg) => {
            setLastword(arg)
            return router.push(to)
        },
        replace: (to, ...arg) => {
            setLastword(arg)
            return router.push(to)
        }
    }
    return paramsRouter
}

export const RouterGuard = defineComponent({
    setup(props, ctx) {
        const route = useRoute()
        watch(
            () => route.path,
            (path: string) => {
                if (lastWords.value) {
                    const { params, option } = lastWords.value
                    const call = () => {
                        if (navigateBy.value) {
                            listeners.value[path]?.(params)
                            navigateBy.value = false
                        }
                    }
                    if (option?.target === path) {
                        call()
                    }
                    else call()
                    if (option?.once) {
                        listeners.value[path] = null
                    }
                }
            }
        )
        return () => ctx.slots.default!()
    }
})